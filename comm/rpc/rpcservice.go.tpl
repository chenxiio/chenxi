// Code generated by gitee.com/magic-mountain/asmb/utils/rpc/gen.go.
package {{.OutPkg}}

import (
{{range .Imports}}	{{.}}
{{end}}
)

{{range .Infos}}
type {{.Name}}Service struct {
{{range .Include}}{{.}}Service
{{end}}
	Clist *concurrent.ConcurrentList
	Local    {{.Name}}
}
{{end}}

{{range .Infos}}
{{$name := .Name}}
{{range .Methods}}
func (s *{{$name}}Service) {{.Name}}({{.NamedParams}}) ({{.Results}}) {    
	{{if .Issupport}}	
	if s.Local != nil {
		return s.Local.{{.Name}}({{.ParamNames}})
	}
	ret := make(chan struct{})
    {{.Namedresults}}		
	go func() {
		if s.Clist==nil || s.Clist.Front() == nil {
			err = errors.New("list is empty")
			ret <- struct{}{}
			ret = nil
			return
		}
		ch := make(chan struct{}, 3)
		Front := s.Clist.Front()
		for element := s.Clist.Front(); element != nil; element = element.Next() {
			if ret == nil || element.Next() == Front {
				break
			}
			ch <- struct{}{}
			go func(e *list.Element) {
				rs := e.Value.(*rpc.RpcService)
				t := time.Now()
				{{.Resultsnames}} = rs.V.({{$name}}).{{.Name}}({{.ParamNames}})				
				rs.Reaction_time = time.Since(t)
				if err != nil {
					// 队尾
					s.Clist.MoveToBack(e)
					fmt.Printf("warning:%s,%v\n", rs.Url, err)
				} else {
					if ret != nil {
						// 队首
						if rs.Reaction_time < time.Millisecond*100 {
							s.Clist.MoveToFront(e)
						}
						ret <- struct{}{}
						ret = nil
					} else {
						// 向后一位
						if rs.Reaction_time > time.Second*1 {
							s.Clist.MoveAfter(e, e.Next())
						}
					}
				}
				<-ch
				if len(ch) == 0 && ret != nil {
					err = errors.New("all services are unavailable")
					ret <- struct{}{}
					ret = nil
				}
			}(element)
		}			
	}()

	select {
	case <-p0.Done():
		err = errors.New("ctx canceled")
		return {{.Resultsnames}}
	case  <-ret:		
		return {{.Resultsnames}}	
	}	
	{{else}}
	panic("not support")
	{{end}}
}
{{end}}
{{end}}

{{range .Infos}}var _ {{.Name}} = new({{.Name}}Service)
{{end}}
