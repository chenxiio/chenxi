// Code generated by gitee.com/magic-mountain/asmb/utils/rpc/gen.go. 
package api

import (
	"context"
	"github.com/chenxiio/chenxi/cfg"
	"github.com/chenxiio/chenxi/models"

)


type ALMApiStruct struct {

	Internal struct {

		ClearAlarms func(p0 context.Context, p1 int64, p2 int) (error) `perm:"none"`
		GetAlarms func(p0 context.Context) ([]models.Alarm, error) `perm:"none"`
		GetAlarmsHistory func(p0 context.Context, p1 int64, p2 int64) ([]models.Alarm, error) `perm:"none"`
		Insert func(p0 context.Context, p1 *models.Alarm) (error) `perm:"none"`
	}
}

type ALMApiStub struct {

}

type CMApiStruct struct {

	Internal struct {

		Home func(p0 context.Context, p1 string) (error) `perm:"none"`
		In func(p0 context.Context, p1 string) (error) `perm:"none"`
		Init func(p0 context.Context, p1 string) (error) `perm:"none"`
		Load func(p0 context.Context, p1 string) (error) `perm:"none"`
		Map func(p0 context.Context, p1 string) (error) `perm:"none"`
		Move func(p0 context.Context, p1 string) (error) `perm:"none"`
		Next func(p0 context.Context, p1 string) (error) `perm:"none"`
		Out func(p0 context.Context, p1 string) (error) `perm:"none"`
		PreIn func(p0 context.Context, p1 string) (error) `perm:"none"`
		PreOut func(p0 context.Context, p1 string) (error) `perm:"none"`
		Unload func(p0 context.Context, p1 string) (error) `perm:"none"`
	}
}

type CMApiStub struct {

}

type CTCApiStruct struct {

	Internal struct {

		Init func(p0 context.Context, p1 string) (error) `perm:"none"`
		Move func(p0 context.Context, p1 string, p2 string) (error) `perm:"none"`
	}
}

type CTCApiStub struct {

}

type DrvapiStruct struct {

	Internal struct {

		ReadDouble func(p0 context.Context, p1 string) (float64, error) ``
		ReadInt func(p0 context.Context, p1 string) (int32, error) ``
		ReadString func(p0 context.Context, p1 string) (string, error) ``
		Start func(p0 context.Context, p1 string) (error) ``
		Stop func(p0 context.Context, p1 string) (error) ``
		WriteDouble func(p0 context.Context, p1 string, p2 float64) (error) ``
		WriteInt func(p0 context.Context, p1 string, p2 int32) (error) ``
		WriteString func(p0 context.Context, p1 string, p2 string) (error) ``
	}
}

type DrvapiStub struct {

}

type IOServerAPIStruct struct {

	Internal struct {

		ReadDouble func(p0 context.Context, p1 string) (float64, error) `perm:"none"`
		ReadFromPrefix func(p0 context.Context, p1 string) (map[string]any, error) `perm:"none"`
		ReadInt func(p0 context.Context, p1 string) (int32, error) `perm:"none"`
		ReadString func(p0 context.Context, p1 string) (string, error) `perm:"none"`
		SetState func(p0 context.Context, p1 string, p2 string) (error) `perm:"none"`
		WriteDouble func(p0 context.Context, p1 string, p2 float64) (error) `perm:"none"`
		WriteInt func(p0 context.Context, p1 string, p2 int32) (error) `perm:"none"`
		WriteString func(p0 context.Context, p1 string, p2 string) (error) `perm:"none"`
	}
}

type IOServerAPIStub struct {

}

type JobApiStruct struct {

	Internal struct {

		Abort func(p0 context.Context) (error) `perm:"none"`
		Auto func(p0 context.Context) (error) `perm:"none"`
		CJAbort func(p0 context.Context, p1 string) (*models.ControlJob, error) `perm:"none"`
		CJCreate func(p0 context.Context, p1 *models.ControlJob) (*models.ControlJob, error) `perm:"none"`
		CJEnd func(p0 context.Context, p1 string) (*models.ControlJob, error) `perm:"none"`
		CJList func(p0 context.Context) ([]*models.ControlJob, error) `perm:"none"`
		CJPause func(p0 context.Context, p1 string) (*models.ControlJob, error) `perm:"none"`
		CJResume func(p0 context.Context, p1 string) (*models.ControlJob, error) `perm:"none"`
		CJStart func(p0 context.Context, p1 string) (*models.ControlJob, error) `perm:"none"`
		ClearWafer func(p0 context.Context, p1 string) (error) `perm:"none"`
		Continue func(p0 context.Context) (error) `perm:"none"`
		End func(p0 context.Context) (error) `perm:"none"`
		Init func(p0 context.Context, p1 string) (error) `perm:"none"`
		PJCreate func(p0 context.Context, p1 *models.ProcessJob) (*models.ProcessJob, error) `perm:"none"`
		Pause func(p0 context.Context) (error) `perm:"none"`
		Resume func(p0 context.Context) (error) `perm:"none"`
	}
}

type JobApiStub struct {

}

type ModuleApiStruct struct {

	Internal struct {

		In func(p0 context.Context, p1 string) (error) `perm:"none"`
		Init func(p0 context.Context, p1 string) (error) `perm:"none"`
		Move func(p0 context.Context, p1 string) (error) `perm:"none"`
		Next func(p0 context.Context, p1 string) (error) `perm:"none"`
		Out func(p0 context.Context, p1 string) (error) `perm:"none"`
		PreIn func(p0 context.Context, p1 string) (error) `perm:"none"`
		PreOut func(p0 context.Context, p1 string) (error) `perm:"none"`
	}
}

type ModuleApiStub struct {

}

type PMApiStruct struct {

	Internal struct {

		Abort func(p0 context.Context, p1 string) (error) `perm:"none"`
		End func(p0 context.Context, p1 string) (error) `perm:"none"`
		In func(p0 context.Context, p1 string) (error) `perm:"none"`
		Init func(p0 context.Context, p1 string) (error) `perm:"none"`
		Move func(p0 context.Context, p1 string) (error) `perm:"none"`
		Next func(p0 context.Context, p1 string) (error) `perm:"none"`
		Out func(p0 context.Context, p1 string) (error) `perm:"none"`
		Pause func(p0 context.Context, p1 string) (error) `perm:"none"`
		PreIn func(p0 context.Context, p1 string) (error) `perm:"none"`
		PreOut func(p0 context.Context, p1 string) (error) `perm:"none"`
		Process func(p0 context.Context, p1 string) (error) `perm:"none"`
		Ready func(p0 context.Context, p1 string) (error) `perm:"none"`
		Resume func(p0 context.Context, p1 string) (error) `perm:"none"`
	}
}

type PMApiStub struct {

}

type RecipeApiStruct struct {

	Internal struct {

		ReadProcessRecipe func(p0 context.Context, p1 string) (cfg.ProcessRecipe, error) `perm:"none"`
		ReadProcessRecipeList func(p0 context.Context) ([]string, error) `perm:"none"`
		ReadUnitRecipe func(p0 context.Context, p1 string, p2 string) (cfg.UnitRecipe, error) `perm:"none"`
		ReadUnitRecipeList func(p0 context.Context, p1 string) ([]string, error) `perm:"none"`
		SaveProcessRecipe func(p0 context.Context, p1 string, p2 cfg.ProcessRecipe) (error) `perm:"none"`
		SaveUnitRecipe func(p0 context.Context, p1 string, p2 string, p3 cfg.UnitRecipe) (error) `perm:"none"`
	}
}

type RecipeApiStub struct {

}

type TMApiStruct struct {

	Internal struct {

		Init func(p0 context.Context, p1 string) (error) `perm:"none"`
		Pick func(p0 context.Context, p1 string) (error) `perm:"none"`
		Place func(p0 context.Context, p1 string) (error) `perm:"none"`
		PostPick func(p0 context.Context, p1 string) (error) `perm:"none"`
		PostPlace func(p0 context.Context, p1 string) (error) `perm:"none"`
		PrePick func(p0 context.Context, p1 string) (error) `perm:"none"`
		PrePlace func(p0 context.Context, p1 string) (error) `perm:"none"`
	}
}

type TMApiStub struct {

}





func (s *ALMApiStruct) ClearAlarms(p0 context.Context, p1 int64, p2 int) (error) {
	return s.Internal.ClearAlarms(p0, p1, p2)
}


func (s *ALMApiStruct) GetAlarms(p0 context.Context) ([]models.Alarm, error) {
	return s.Internal.GetAlarms(p0)
}


func (s *ALMApiStruct) GetAlarmsHistory(p0 context.Context, p1 int64, p2 int64) ([]models.Alarm, error) {
	return s.Internal.GetAlarmsHistory(p0, p1, p2)
}


func (s *ALMApiStruct) Insert(p0 context.Context, p1 *models.Alarm) (error) {
	return s.Internal.Insert(p0, p1)
}





func (s *CMApiStruct) Home(p0 context.Context, p1 string) (error) {
	return s.Internal.Home(p0, p1)
}


func (s *CMApiStruct) In(p0 context.Context, p1 string) (error) {
	return s.Internal.In(p0, p1)
}


func (s *CMApiStruct) Init(p0 context.Context, p1 string) (error) {
	return s.Internal.Init(p0, p1)
}


func (s *CMApiStruct) Load(p0 context.Context, p1 string) (error) {
	return s.Internal.Load(p0, p1)
}


func (s *CMApiStruct) Map(p0 context.Context, p1 string) (error) {
	return s.Internal.Map(p0, p1)
}


func (s *CMApiStruct) Move(p0 context.Context, p1 string) (error) {
	return s.Internal.Move(p0, p1)
}


func (s *CMApiStruct) Next(p0 context.Context, p1 string) (error) {
	return s.Internal.Next(p0, p1)
}


func (s *CMApiStruct) Out(p0 context.Context, p1 string) (error) {
	return s.Internal.Out(p0, p1)
}


func (s *CMApiStruct) PreIn(p0 context.Context, p1 string) (error) {
	return s.Internal.PreIn(p0, p1)
}


func (s *CMApiStruct) PreOut(p0 context.Context, p1 string) (error) {
	return s.Internal.PreOut(p0, p1)
}


func (s *CMApiStruct) Unload(p0 context.Context, p1 string) (error) {
	return s.Internal.Unload(p0, p1)
}





func (s *CTCApiStruct) Init(p0 context.Context, p1 string) (error) {
	return s.Internal.Init(p0, p1)
}


func (s *CTCApiStruct) Move(p0 context.Context, p1 string, p2 string) (error) {
	return s.Internal.Move(p0, p1, p2)
}





func (s *DrvapiStruct) ReadDouble(p0 context.Context, p1 string) (float64, error) {
	return s.Internal.ReadDouble(p0, p1)
}


func (s *DrvapiStruct) ReadInt(p0 context.Context, p1 string) (int32, error) {
	return s.Internal.ReadInt(p0, p1)
}


func (s *DrvapiStruct) ReadString(p0 context.Context, p1 string) (string, error) {
	return s.Internal.ReadString(p0, p1)
}


func (s *DrvapiStruct) Start(p0 context.Context, p1 string) (error) {
	return s.Internal.Start(p0, p1)
}


func (s *DrvapiStruct) Stop(p0 context.Context, p1 string) (error) {
	return s.Internal.Stop(p0, p1)
}


func (s *DrvapiStruct) WriteDouble(p0 context.Context, p1 string, p2 float64) (error) {
	return s.Internal.WriteDouble(p0, p1, p2)
}


func (s *DrvapiStruct) WriteInt(p0 context.Context, p1 string, p2 int32) (error) {
	return s.Internal.WriteInt(p0, p1, p2)
}


func (s *DrvapiStruct) WriteString(p0 context.Context, p1 string, p2 string) (error) {
	return s.Internal.WriteString(p0, p1, p2)
}





func (s *IOServerAPIStruct) ReadDouble(p0 context.Context, p1 string) (float64, error) {
	return s.Internal.ReadDouble(p0, p1)
}


func (s *IOServerAPIStruct) ReadFromPrefix(p0 context.Context, p1 string) (map[string]any, error) {
	return s.Internal.ReadFromPrefix(p0, p1)
}


func (s *IOServerAPIStruct) ReadInt(p0 context.Context, p1 string) (int32, error) {
	return s.Internal.ReadInt(p0, p1)
}


func (s *IOServerAPIStruct) ReadString(p0 context.Context, p1 string) (string, error) {
	return s.Internal.ReadString(p0, p1)
}


func (s *IOServerAPIStruct) SetState(p0 context.Context, p1 string, p2 string) (error) {
	return s.Internal.SetState(p0, p1, p2)
}


func (s *IOServerAPIStruct) WriteDouble(p0 context.Context, p1 string, p2 float64) (error) {
	return s.Internal.WriteDouble(p0, p1, p2)
}


func (s *IOServerAPIStruct) WriteInt(p0 context.Context, p1 string, p2 int32) (error) {
	return s.Internal.WriteInt(p0, p1, p2)
}


func (s *IOServerAPIStruct) WriteString(p0 context.Context, p1 string, p2 string) (error) {
	return s.Internal.WriteString(p0, p1, p2)
}





func (s *JobApiStruct) Abort(p0 context.Context) (error) {
	return s.Internal.Abort(p0)
}


func (s *JobApiStruct) Auto(p0 context.Context) (error) {
	return s.Internal.Auto(p0)
}


func (s *JobApiStruct) CJAbort(p0 context.Context, p1 string) (*models.ControlJob, error) {
	return s.Internal.CJAbort(p0, p1)
}


func (s *JobApiStruct) CJCreate(p0 context.Context, p1 *models.ControlJob) (*models.ControlJob, error) {
	return s.Internal.CJCreate(p0, p1)
}


func (s *JobApiStruct) CJEnd(p0 context.Context, p1 string) (*models.ControlJob, error) {
	return s.Internal.CJEnd(p0, p1)
}


func (s *JobApiStruct) CJList(p0 context.Context) ([]*models.ControlJob, error) {
	return s.Internal.CJList(p0)
}


func (s *JobApiStruct) CJPause(p0 context.Context, p1 string) (*models.ControlJob, error) {
	return s.Internal.CJPause(p0, p1)
}


func (s *JobApiStruct) CJResume(p0 context.Context, p1 string) (*models.ControlJob, error) {
	return s.Internal.CJResume(p0, p1)
}


func (s *JobApiStruct) CJStart(p0 context.Context, p1 string) (*models.ControlJob, error) {
	return s.Internal.CJStart(p0, p1)
}


func (s *JobApiStruct) ClearWafer(p0 context.Context, p1 string) (error) {
	return s.Internal.ClearWafer(p0, p1)
}


func (s *JobApiStruct) Continue(p0 context.Context) (error) {
	return s.Internal.Continue(p0)
}


func (s *JobApiStruct) End(p0 context.Context) (error) {
	return s.Internal.End(p0)
}


func (s *JobApiStruct) Init(p0 context.Context, p1 string) (error) {
	return s.Internal.Init(p0, p1)
}


func (s *JobApiStruct) PJCreate(p0 context.Context, p1 *models.ProcessJob) (*models.ProcessJob, error) {
	return s.Internal.PJCreate(p0, p1)
}


func (s *JobApiStruct) Pause(p0 context.Context) (error) {
	return s.Internal.Pause(p0)
}


func (s *JobApiStruct) Resume(p0 context.Context) (error) {
	return s.Internal.Resume(p0)
}





func (s *ModuleApiStruct) In(p0 context.Context, p1 string) (error) {
	return s.Internal.In(p0, p1)
}


func (s *ModuleApiStruct) Init(p0 context.Context, p1 string) (error) {
	return s.Internal.Init(p0, p1)
}


func (s *ModuleApiStruct) Move(p0 context.Context, p1 string) (error) {
	return s.Internal.Move(p0, p1)
}


func (s *ModuleApiStruct) Next(p0 context.Context, p1 string) (error) {
	return s.Internal.Next(p0, p1)
}


func (s *ModuleApiStruct) Out(p0 context.Context, p1 string) (error) {
	return s.Internal.Out(p0, p1)
}


func (s *ModuleApiStruct) PreIn(p0 context.Context, p1 string) (error) {
	return s.Internal.PreIn(p0, p1)
}


func (s *ModuleApiStruct) PreOut(p0 context.Context, p1 string) (error) {
	return s.Internal.PreOut(p0, p1)
}





func (s *PMApiStruct) Abort(p0 context.Context, p1 string) (error) {
	return s.Internal.Abort(p0, p1)
}


func (s *PMApiStruct) End(p0 context.Context, p1 string) (error) {
	return s.Internal.End(p0, p1)
}


func (s *PMApiStruct) In(p0 context.Context, p1 string) (error) {
	return s.Internal.In(p0, p1)
}


func (s *PMApiStruct) Init(p0 context.Context, p1 string) (error) {
	return s.Internal.Init(p0, p1)
}


func (s *PMApiStruct) Move(p0 context.Context, p1 string) (error) {
	return s.Internal.Move(p0, p1)
}


func (s *PMApiStruct) Next(p0 context.Context, p1 string) (error) {
	return s.Internal.Next(p0, p1)
}


func (s *PMApiStruct) Out(p0 context.Context, p1 string) (error) {
	return s.Internal.Out(p0, p1)
}


func (s *PMApiStruct) Pause(p0 context.Context, p1 string) (error) {
	return s.Internal.Pause(p0, p1)
}


func (s *PMApiStruct) PreIn(p0 context.Context, p1 string) (error) {
	return s.Internal.PreIn(p0, p1)
}


func (s *PMApiStruct) PreOut(p0 context.Context, p1 string) (error) {
	return s.Internal.PreOut(p0, p1)
}


func (s *PMApiStruct) Process(p0 context.Context, p1 string) (error) {
	return s.Internal.Process(p0, p1)
}


func (s *PMApiStruct) Ready(p0 context.Context, p1 string) (error) {
	return s.Internal.Ready(p0, p1)
}


func (s *PMApiStruct) Resume(p0 context.Context, p1 string) (error) {
	return s.Internal.Resume(p0, p1)
}





func (s *RecipeApiStruct) ReadProcessRecipe(p0 context.Context, p1 string) (cfg.ProcessRecipe, error) {
	return s.Internal.ReadProcessRecipe(p0, p1)
}


func (s *RecipeApiStruct) ReadProcessRecipeList(p0 context.Context) ([]string, error) {
	return s.Internal.ReadProcessRecipeList(p0)
}


func (s *RecipeApiStruct) ReadUnitRecipe(p0 context.Context, p1 string, p2 string) (cfg.UnitRecipe, error) {
	return s.Internal.ReadUnitRecipe(p0, p1, p2)
}


func (s *RecipeApiStruct) ReadUnitRecipeList(p0 context.Context, p1 string) ([]string, error) {
	return s.Internal.ReadUnitRecipeList(p0, p1)
}


func (s *RecipeApiStruct) SaveProcessRecipe(p0 context.Context, p1 string, p2 cfg.ProcessRecipe) (error) {
	return s.Internal.SaveProcessRecipe(p0, p1, p2)
}


func (s *RecipeApiStruct) SaveUnitRecipe(p0 context.Context, p1 string, p2 string, p3 cfg.UnitRecipe) (error) {
	return s.Internal.SaveUnitRecipe(p0, p1, p2, p3)
}





func (s *TMApiStruct) Init(p0 context.Context, p1 string) (error) {
	return s.Internal.Init(p0, p1)
}


func (s *TMApiStruct) Pick(p0 context.Context, p1 string) (error) {
	return s.Internal.Pick(p0, p1)
}


func (s *TMApiStruct) Place(p0 context.Context, p1 string) (error) {
	return s.Internal.Place(p0, p1)
}


func (s *TMApiStruct) PostPick(p0 context.Context, p1 string) (error) {
	return s.Internal.PostPick(p0, p1)
}


func (s *TMApiStruct) PostPlace(p0 context.Context, p1 string) (error) {
	return s.Internal.PostPlace(p0, p1)
}


func (s *TMApiStruct) PrePick(p0 context.Context, p1 string) (error) {
	return s.Internal.PrePick(p0, p1)
}


func (s *TMApiStruct) PrePlace(p0 context.Context, p1 string) (error) {
	return s.Internal.PrePlace(p0, p1)
}




var _ ALMApi = new(ALMApiStruct)
var _ CMApi = new(CMApiStruct)
var _ CTCApi = new(CTCApiStruct)
var _ Drvapi = new(DrvapiStruct)
var _ IOServerAPI = new(IOServerAPIStruct)
var _ JobApi = new(JobApiStruct)
var _ ModuleApi = new(ModuleApiStruct)
var _ PMApi = new(PMApiStruct)
var _ RecipeApi = new(RecipeApiStruct)
var _ TMApi = new(TMApiStruct)


